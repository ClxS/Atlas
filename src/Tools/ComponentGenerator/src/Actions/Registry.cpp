#include "Registry.h"
#include "Arguments.h"

#include <filesystem>
#include <fstream>
#include <map>
#include <queue>
#include <ranges>
#include <set>

#include "tinyxml2.h"
#include "AtlasTrace/Logging.h"

namespace fs = std::filesystem;

ExitCode component_generator::actions::registry(const Arguments& args)
{
    // Write Header
    {
        std::stringstream outFile;
        outFile << "// THIS FILE IS AUTOGENERATED AND SHOULD NOT BE DIRECTLY MODIFIED.\n\n";
        outFile << "#pragma once\n\n";
        outFile << std::format("namespace {}\n", args.m_Namespace.m_Value);
        outFile << "{\n";
        outFile << "\tvoid buildComponentRegistry();\n";
        outFile << "}\n";

        const auto outputPath = args.m_ComponentRoot.m_Value / "generated" / "Registry.h";
        fs::create_directories(outputPath.parent_path());
        std::ofstream out(outputPath);
        out << outFile.str();
        out.close();
    }

    // Write Source
    {
        std::stringstream outFile;
        outFile << "// THIS FILE IS AUTOGENERATED AND SHOULD NOT BE DIRECTLY MODIFIED.\n\n";

        outFile << std::format("#include \"{}PCH.h\"\n\n", args.m_ProjectName.m_Value);
        outFile << std::format("#include \"Registry.h\"\n\n", args.m_ProjectName.m_Value);

        auto groups = std::views::split(args.m_Groups.m_Value, ';');
        for(const auto& group : groups)
        {
            outFile << std::format("namespace {} {{ void registerComponents(); }}\n", std::string(group));
        }
        outFile << "\n";
        outFile << std::format("void {}::buildComponentRegistry()\n", args.m_Namespace.m_Value);
        outFile << "{\n";
        for(const auto& group : groups)
        {
            outFile << std::format("\t{}::registerComponents();\n", std::string(group));
        }

        outFile << "}\n";

        const auto outputPath = args.m_ComponentRoot.m_Value / "generated" / "Registry.cpp";
        fs::create_directories(outputPath.parent_path());
        std::ofstream out(outputPath);
        out << outFile.str();
        out.close();
    }

    return ExitCode::Success;
}
